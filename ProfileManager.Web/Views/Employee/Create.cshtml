@model ProfileManager.Entities.Employee

@{
    ViewData["Title"] = "Create";
}

<h2>Add a new employee</h2>
<p>Use this form to add a new employee. Upload a photo or snap a live pic to use for their profile.</p>
<hr />

<form asp-action="Create" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Department" class="control-label"></label>
                <input asp-for="Department" class="form-control" />
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>
        </div>
    </div>
    
    <h2>Profile Photo</h2>
    <div class="row">
        <div class="col-md-6">
            <h4>Upload from your computer, or...</h4>
            <div class="form-group">
                <label class="btn btn-primary btn-file">
                    <span class="glyphicon glyphicon-cloud-upload"></span> Upload a profile photo from your computer
                    <input type="file" class="form-control" name="photoFile" style="display:none;" />
                </label>
            </div>
            
        </div>
        <div class="col-md-6">
            <h4>...take a live photo</h4>
            <div id="live-container">
                <video id="live-video">Video stream not available.</video>
                <button id="startbutton" class="btn btn-primary live-snapshot-button">Take photo</button>
                <canvas id="canvas" class="live-canvas"></canvas>
                <div class="output">
                    <img id="photo" alt="The screen capture will appear in this box." class="live-result-photo">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <input type="hidden" id="photoB64" name="photoB64" />
                    <input type="submit" value="Create new user" class="btn btn-lg btn-success" style="width:50%;margin-left:25%;" />
                </div>
            </div>
        </div>
    </div>
</form>
@*<div>
    <a asp-action="Index" class="btn btn-default"><span class="glyphicon glyphicon-backward"></span> Back to List</a>
</div>*@

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">
        // neat! see here: https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
        (function () {
            var width = 480;    // We will scale the photo width to this
            var height = 0;     // This will be computed based on the input stream

            var streaming = false;

            var video = null;
            var canvas = null;
            var photo = null;
            var startbutton = null;
            var photoDataToSubmit = null;

            function startup() {
                video = document.getElementById('live-video');
                canvas = document.getElementById('canvas');
                photo = document.getElementById('photo');
                startbutton = document.getElementById('startbutton');
                photoDataToSubmit = document.getElementById("photoB64");

                navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                    .then(function (stream) {
                        video.srcObject = stream;
                        video.play();
                    })
                    .catch(function (err) {
                        console.log("An error occurred! " + err);
                    });

                video.addEventListener('canplay', function (ev) {
                    if (!streaming) {
                        height = video.videoHeight / (video.videoWidth / width);

                        video.setAttribute('width', width);
                        video.setAttribute('height', height);
                        canvas.setAttribute('width', width);
                        canvas.setAttribute('height', height);
                        streaming = true;
                    }
                }, false);

                startbutton.addEventListener('click', function (ev) {
                    takepicture();
                    ev.preventDefault();
                }, false);
                clearphoto();
            }

            function clearphoto() {
                var context = canvas.getContext('2d');
                context.fillStyle = "#AAA";
                context.fillRect(0, 0, canvas.width, canvas.height);

                var data = canvas.toDataURL('image/png');
                photo.setAttribute('src', data);
            }

            function takepicture() {
                var context = canvas.getContext('2d');
                if (width && height) {
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(video, 0, 0, width, height);

                    var data = canvas.toDataURL('image/png');
                    photo.setAttribute('src', data);
                    $("#photo").show();
                    $("#submit-live-photo").show();
                    photoDataToSubmit.setAttribute("value", data);
                } else {
                    clearphoto();
                }
            }
            // Set up our event listener to run the startup process
            // once loading is complete.
            window.addEventListener('load', startup, false);
        })();
    </script>
}
